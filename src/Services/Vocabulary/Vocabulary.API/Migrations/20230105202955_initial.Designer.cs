// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vocabulary.API.Models.Entities;

#nullable disable

namespace Vocabulary.API.Migrations
{
    [DbContext(typeof(VocabularyDBContext))]
    [Migration("20230105202955_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseUsers", (string)null);
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(705),
                            IsDelete = false,
                            Title = "A1",
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(706)
                        });
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.CardSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FalseCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinish")
                        .HasColumnType("bit");

                    b.Property<double?>("Scor")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrueCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("CardSession", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(717),
                            EndDate = new DateTime(2023, 1, 5, 23, 30, 54, 812, DateTimeKind.Local).AddTicks(718),
                            FalseCount = 2,
                            IsDelete = false,
                            IsFinish = true,
                            StartDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(721),
                            TrueCount = 2,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(717),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(782),
                            Description = "Temel Seviyede İngilizce Öğrenme Kursu",
                            IsDelete = false,
                            Title = "Temel İngilizce",
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(782),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(523),
                            IsDelete = false,
                            Name = "Muhammet",
                            Surname = "Çağatay",
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(523)
                        });
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            Context = "Door",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(646),
                            IsDelete = false,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(647)
                        },
                        new
                        {
                            Id = 2,
                            CardId = 1,
                            Context = "Window",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(649),
                            IsDelete = false,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(649)
                        },
                        new
                        {
                            Id = 3,
                            CardId = 1,
                            Context = "Computer",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(651),
                            IsDelete = false,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(652)
                        });
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.WordAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WordId");

                    b.ToTable("WordAnswer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "Kapı",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(666),
                            IsDelete = false,
                            IsTrue = true,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(667),
                            WordId = 1
                        },
                        new
                        {
                            Id = 2,
                            Answer = "Kaldırım",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(669),
                            IsDelete = false,
                            IsTrue = false,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(669),
                            WordId = 1
                        },
                        new
                        {
                            Id = 3,
                            Answer = "Uzay",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(671),
                            IsDelete = false,
                            IsTrue = false,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(671),
                            WordId = 1
                        },
                        new
                        {
                            Id = 4,
                            Answer = "Şirket",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(673),
                            IsDelete = false,
                            IsTrue = false,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(673),
                            WordId = 1
                        },
                        new
                        {
                            Id = 5,
                            Answer = "Pencere",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(675),
                            IsDelete = false,
                            IsTrue = true,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(675),
                            WordId = 2
                        },
                        new
                        {
                            Id = 6,
                            Answer = "Limonata",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(676),
                            IsDelete = false,
                            IsTrue = false,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(677),
                            WordId = 2
                        },
                        new
                        {
                            Id = 7,
                            Answer = "Sandalye",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(678),
                            IsDelete = false,
                            IsTrue = false,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(679),
                            WordId = 2
                        },
                        new
                        {
                            Id = 8,
                            Answer = "Teknokent",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(680),
                            IsDelete = false,
                            IsTrue = false,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(681),
                            WordId = 2
                        },
                        new
                        {
                            Id = 9,
                            Answer = "Bilgisayar",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(682),
                            IsDelete = false,
                            IsTrue = true,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(683),
                            WordId = 3
                        },
                        new
                        {
                            Id = 10,
                            Answer = "Bardak",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(684),
                            IsDelete = false,
                            IsTrue = false,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(685),
                            WordId = 3
                        },
                        new
                        {
                            Id = 11,
                            Answer = "Çanta",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(686),
                            IsDelete = false,
                            IsTrue = false,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(687),
                            WordId = 3
                        },
                        new
                        {
                            Id = 12,
                            Answer = "Kalemlik",
                            CreatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(688),
                            IsDelete = false,
                            IsTrue = false,
                            UpdatedDate = new DateTime(2023, 1, 5, 23, 29, 54, 812, DateTimeKind.Local).AddTicks(689),
                            WordId = 3
                        });
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.HasOne("Vocabulary.API.Models.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseUsers_Courses");

                    b.HasOne("Vocabulary.API.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseUsers_Users");
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.Card", b =>
                {
                    b.HasOne("Vocabulary.API.Models.Entities.Course", "Course")
                        .WithMany("Cards")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Cards_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.CardSession", b =>
                {
                    b.HasOne("Vocabulary.API.Models.Entities.Card", "Card")
                        .WithMany("CardSessions")
                        .HasForeignKey("CardId")
                        .IsRequired()
                        .HasConstraintName("FK_CardSession_Cards");

                    b.HasOne("Vocabulary.API.Models.Entities.User", "User")
                        .WithMany("CardSessions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CardSession_Users");

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.Course", b =>
                {
                    b.HasOne("Vocabulary.API.Models.Entities.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Courses_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.Word", b =>
                {
                    b.HasOne("Vocabulary.API.Models.Entities.Card", "Card")
                        .WithMany("Words")
                        .HasForeignKey("CardId")
                        .IsRequired()
                        .HasConstraintName("FK_Words_Cards");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.WordAnswer", b =>
                {
                    b.HasOne("Vocabulary.API.Models.Entities.Word", "Word")
                        .WithMany("WordAnswers")
                        .HasForeignKey("WordId")
                        .IsRequired()
                        .HasConstraintName("FK_WordAnswer_Words");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.Card", b =>
                {
                    b.Navigation("CardSessions");

                    b.Navigation("Words");
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.Course", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.User", b =>
                {
                    b.Navigation("CardSessions");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Vocabulary.API.Models.Entities.Word", b =>
                {
                    b.Navigation("WordAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
